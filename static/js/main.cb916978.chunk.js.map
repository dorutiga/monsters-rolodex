{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","cautare","target","value","state","fetch","then","raspuns","json","users","this","monstriiFiltrati","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAAAC,GAAK,OAExB,sBAAKC,UAAW,iBAAhB,UACI,qBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACxB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJRC,EAAW,SAACR,GAE1B,OAAS,qBAAKC,UAAW,YAAhB,SAEPD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC5B,cAAC,EAAD,CAAwBA,QAAWA,GAAxBA,EAAQC,UCLNM,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACxB,uBACQZ,UAAW,SACXa,KAAM,SACNF,YAAcA,EACdG,SAAWF,MCoCJG,G,wDAtCb,aAAc,IAAD,8BACX,gBAaFH,aAAc,SAACI,GACb,EAAKC,SAAS,CAACC,QAASF,EAAEG,OAAOC,SAbjC,EAAKC,MAAO,CACVb,SAAU,GACVU,QAAS,IAJA,E,qDAOb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAOzC,WAAW,IAAD,EACoBC,KAAKN,MAAzBb,EADA,EACAA,SAAUU,EADV,EACUA,QACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAQY,kBAI9C,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACAW,YAAc,iBACdC,aAAee,KAAKf,eAEpB,cAAC,EAAD,CAAUJ,SAAYoB,EAAtB,sB,GAhCUI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cb916978.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.style.css'\r\nexport const Card = props =>(\r\n    \r\n <div className =\"card-container\">\r\n     <img alt=\"monsters\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n    <h2>{props.monster.name}</h2> \r\n    <p>{props.monster.email}</p>\r\n </div>\r\n)\r\n    \r\n ","import React from 'react';\r\nimport './card-list.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const  CardList = (props) =>{\r\n    \r\nreturn ( <div className =\"card-list\"> \r\n\r\n{ props.monsters.map(monster=>(\r\n<Card key={monster.id}  monster = {monster}/>))}\r\n     \r\n</div >)\r\n}","import React from 'react';\r\n\r\nimport './search-box.css';\r\n\r\nexport const SearchBox =({placeholder, handleChange })=>(\r\n<input \r\n        className= \"search\"\r\n        type= \"search\"\r\n        placeholder ={placeholder}\r\n        onChange= {handleChange} \r\n    />\r\n)\r\n","import {Component} from 'react'\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component'\nimport './App.css';\nimport React from 'react';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state ={\n      monsters :[],\n      cautare: ''\n    }\n  }\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(raspuns => raspuns.json())\n   .then(users => this.setState({monsters: users}))\n    \n    \n  }\n  handleChange =(e) => {\n    this.setState({cautare: e.target.value})\n  }\n  render()  {\n    const { monsters, cautare} =this.state; //noile constante sunt copi ale state ului initial\n    const monstriiFiltrati = monsters.filter(monster=> \n      monster.name.toLowerCase().includes(cautare.toLowerCase())\n      );\n      //filter are 2 argumente, primul contine informatiile, al doilea seteaza o regula, rezultat true or false\n      //functia includes() ->se verifica daca numele monstrului se gaseste in variabila searchfield\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n        placeholder = 'Search monster'\n        handleChange ={this.handleChange}\n        />\n        <CardList monsters = {monstriiFiltrati} > </CardList>\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}